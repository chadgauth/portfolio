---
const { className = '' } = Astro.props;
---

<div id="description" x-ref="messages" class="hidden"><slot /></div>

<div
  x-data="typewriter()"
  x-init="startTyping"
  x-text="text"
  aria-hidden="true"
  aria-describedby="description"
  class={`relative font-mono ${className}`}
>
</div>

<style>
  @keyframes cursor-blink {
    0%, 49% { 
      opacity: 1;
    }
    50%, 100% { 
      opacity: 0;
    }
  }

  [x-data="typewriter()"] {
    position: relative;
    min-height: 1.6em;
  }

  [x-data="typewriter()"]::after {
    content: '|';
    position: absolute;
    margin-left: 0.1em;
    color: oklch(0.8 0.2 140);
    animation: cursor-blink 1s steps(2) infinite;
    font-weight: 200;
  }

  @media (prefers-reduced-motion: reduce) {
    [x-data="typewriter()"]::after {
      animation: none;
    }
  }
</style>

<script>
  import Alpine from "alpinejs";

  const TYPING_SPEED = 50;
  const DELETE_SPEED = 30;
  const PAUSE_BEFORE_DELETE = 2000;
  const PAUSE_BETWEEN_MESSAGES = 700;
  const SPEED_UP_THRESHOLD = 5;
  const FAST_DELETE_SPEED = 15;
  const MIN_DELETE_SPEED = 8;
  const RETRY_DELAY = 50;

  function initTypewriter() {
    Alpine.data("typewriter", () => ({
      text: "",
      messages: [],
      currentMessage: 0,
      isDeleting: false,

      startTyping() {
        this.$nextTick(() => {
          const messages = document.querySelectorAll('[x-ref="messages"] p');
          this.messages = Array.from(messages).map(
            (message) => (message as HTMLElement).innerText
          );
          this.typeMessage();
        });
      },

      typeMessage() {
        if (!this.messages.length) {
          setTimeout(() => this.typeMessage(), RETRY_DELAY);
          return;
        }

        if (this.isDeleting) {
          this.deleteText();
        } else {
          this.addText();
        }
      },

      deleteText() {
        if (this.text.length === 0) {
          this.isDeleting = false;
          this.currentMessage = (this.currentMessage + 1) % this.messages.length;
          setTimeout(() => this.typeMessage(), PAUSE_BETWEEN_MESSAGES);
          return;
        }

        let speed = DELETE_SPEED;
        if (this.messages[this.currentMessage].length - this.text.length > SPEED_UP_THRESHOLD) {
          speed = FAST_DELETE_SPEED;
        }

        this.text = this.text.slice(0, -1);
        setTimeout(() => this.typeMessage(), MIN_DELETE_SPEED + Math.random() * speed);
      },

      addText() {
        const currentMessageText = this.messages[this.currentMessage];
        
        if (this.text.length === currentMessageText.length) {
          this.isDeleting = true;
          setTimeout(() => this.typeMessage(), PAUSE_BEFORE_DELETE);
          return;
        }

        this.text += currentMessageText[this.text.length];
        setTimeout(() => this.typeMessage(), Math.random() * TYPING_SPEED);
      }
    }));
  }
  
  document.addEventListener("alpine:init", initTypewriter);
  document.addEventListener("astro:beforereload", initTypewriter);
</script>
