---
const { className = '' } = Astro.props;
---

<div id="description" x-ref="messages" class="hidden"><slot /></div>

<div
  x-data="typewriter()"
  x-init="startTyping"
  x-text="text"
  aria-hidden="true"
  aria-describedby="description"
  class={`text-secondary-foreground text-base leading-tight md:text-xl h-9 md:h-14 ${className}`}
  style="min-height: 1.6em;"
>
</div>

<style>
@keyframes blink {
  0%, 50% { border-right-color: theme('colors.secondary.foreground'); border-opacity: 0.8 }
  51%, 100% { border-right-color: transparent; }
}

div[x-data="typewriter()"]::after {
  content: '';
  display: inline-block;
  width: 0.08em;
  height: 1em;
  border-right-width: 1px;
  animation: blink 1s linear infinite;
  margin-left: 2.5px;
  vertical-align: text-bottom;
}

@media (min-width: 768px) {
  div[x-data="typewriter()"]::after {
    border-right-width: 2px;
    height: 1.25em;
  }
}
</style>

<script>
  import Alpine from "alpinejs";

  const MAX_FASTEST_DELETE_SPEED = 15;
  const INITIAL_DELETE_SPEED = 60;
  const SPEED_UP_AFTER = 5;
  const FAST_SPEED = 10;
  const RETRY_TIMEOUT = 20;
  const BETWEEN_MESSAGES_TIMEOUT = 500;
  const DELETE_START_TIMEOUT = 3500;
  const TYPING_SPEED = 80;

  function initTypewriter() {
    Alpine.data("typewriter", () => ({
      text: "",
      messages: [],
      currentMessage: 0,
      isDeleting: false,
      startTyping() {
        this.$nextTick(() => {
          let messages = document.querySelectorAll('[x-ref="messages"] p');
          this.messages = Array.from(messages).map(
            (message) => (message as HTMLElement).innerText
          );
          this.typeMessage();
        });
      },
      typeMessage() {
        if (!this.messages.length)
          setTimeout(() => this.typeMessage(), RETRY_TIMEOUT);
        else if (this.isDeleting) this.handleDeleting();
        else this.handleTyping();
      },
      handleDeleting() {
        let deleteSpeed = INITIAL_DELETE_SPEED;

        if (this.text.length > 0) {
          this.text = this.text.slice(0, -1);
          if (
            this.messages[this.currentMessage].length - this.text.length >
            SPEED_UP_AFTER
          ) {
            deleteSpeed = FAST_SPEED;
          }
          setTimeout(
            () => this.typeMessage(),
            MAX_FASTEST_DELETE_SPEED + Math.random() * deleteSpeed
          );
        } else {
          this.isDeleting = false;
          this.currentMessage =
            (this.currentMessage + 1) % this.messages.length;
          setTimeout(() => this.typeMessage(), BETWEEN_MESSAGES_TIMEOUT);
        }
      },
      handleTyping() {
        if (this.text.length < this.messages[this.currentMessage].length) {
          this.text += this.messages[this.currentMessage][this.text.length];
          setTimeout(() => this.typeMessage(), Math.random() * TYPING_SPEED);
        } else {
          this.isDeleting = true;
          setTimeout(() => this.typeMessage(), DELETE_START_TIMEOUT);
        }
      },
    }));
  }
  
  document.addEventListener("alpine:init", initTypewriter);

  document.addEventListener("astro:beforereload", initTypewriter);
</script>
