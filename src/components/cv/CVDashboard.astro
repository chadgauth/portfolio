---
import { cvDataV2 } from '../../data/cv.ts';
import {
  getSmartFilterSkills,
  getTopSkills,
  getExperienceMetrics,
  type SkillAnalytics
} from '../../data/cv-analytics.ts';

// Get data for the dashboard
const smartSkills = getSmartFilterSkills();
const topSkills = getTopSkills(12); // Top 12 for initial display
const metrics = getExperienceMetrics();
const experiences = cvDataV2;

// Pass data to components
export interface CVDashboardProps {
  smartSkills: string[];
  topSkills: SkillAnalytics[];
  metrics: any;
  experiences: any[];
}
---

<div class="cv-dashboard" id="cv-dashboard">
  <!-- Metrics Header -->
  <div class="metrics-header bg-gradient-to-r from-cyan-500/10 to-blue-500/10 p-4 rounded-lg mb-6 border border-cyan-400/20">
    <div class="text-center">
      <h2 class="text-lg font-semibold text-gray-200 mb-1">
        {metrics.totalYears}+ Years Experience • {metrics.companies} Companies • {metrics.technologies}+ Technologies
      </h2>
      <p class="text-sm text-gray-400">
        Latest: {metrics.latestCompany} ({metrics.latestRole}) • Top Impact: {metrics.topImpact}/10
      </p>
    </div>
  </div>

  <!-- Controls -->
  <div class="cv-controls mb-6 flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between">
    <!-- View Mode Toggle -->
    <div class="view-toggle flex bg-gray-800/50 rounded-lg p-1 border border-gray-600/30" role="tablist">
      <button 
        class="view-toggle-btn px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60"
        data-view="timeline"
        role="tab"
        aria-selected="true"
        aria-controls="experiences-container"
      >
        Timeline View
      </button>
      <button 
        class="view-toggle-btn px-4 py-2 text-sm font-medium rounded-md transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60"
        data-view="grid"
        role="tab"
        aria-selected="false"
        aria-controls="experiences-container"
      >
        Grid View
      </button>
    </div>

    <!-- Search and Reset -->
    <div class="flex gap-3 items-center">
      <div class="relative">
        <input
          type="text"
          placeholder="Search experiences..."
          class="search-input px-4 py-2 text-sm bg-gray-800/50 border border-gray-600/30 rounded-lg text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 focus:border-cyan-400/60 w-64"
          id="experience-search"
        />
        <svg class="absolute right-3 top-2.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
        </svg>
      </div>
      
      <button 
        class="reset-filters-btn px-4 py-2 text-sm font-medium bg-gray-800/50 border border-gray-600/30 rounded-lg text-gray-400 hover:text-gray-200 hover:bg-gray-800/80 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60"
        id="reset-filters"
      >
        Reset
      </button>
    </div>
  </div>

  <!-- Smart Filters -->
  <div class="smart-filters mb-8">
    <div class="mb-4">
      <h3 class="text-lg font-semibold text-gray-200 mb-2">Focus Areas</h3>
      <p class="text-sm text-gray-400 mb-4">Select skills to see most relevant experiences (showing skills with 2+ examples)</p>
    </div>
    
    <div class="skill-grid grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3">
      {topSkills.map((skill) => (
        <button 
          class="skill-chip px-3 py-2 text-sm rounded-lg border border-gray-600/30 bg-gray-800/40 text-gray-300 hover:bg-gray-800/80 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 text-left"
          data-skill={skill.name}
          title={`${skill.frequency} experiences • Avg impact: ${skill.avgImpact.toFixed(1)}/10`}
        >
          <div class="flex flex-col">
            <span class="font-medium">{skill.name}</span>
            <div class="flex items-center justify-between mt-1">
              <div class="frequency-dots text-xs text-cyan-400">
                {'•'.repeat(Math.min(skill.frequency, 5))}
              </div>
              <span class="text-xs text-gray-500">({skill.frequency})</span>
            </div>
          </div>
        </button>
      ))}
    </div>

    <!-- Show more skills button -->
    {smartSkills.length > 12 && (
      <button 
        class="show-more-skills mt-4 px-4 py-2 text-sm text-cyan-400 hover:text-cyan-300 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 rounded-lg"
        id="show-more-skills"
      >
        Show {smartSkills.length - 12} more skills...
      </button>
    )}

    <!-- Hidden skills (initially) -->
    <div class="additional-skills hidden grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 mt-4">
      {smartSkills.slice(12).map((skillName) => {
        const skillData = topSkills.find(s => s.name === skillName) || { name: skillName, frequency: 2, avgImpact: 7 };
        return (
          <button 
            class="skill-chip px-3 py-2 text-sm rounded-lg border border-gray-600/30 bg-gray-800/40 text-gray-300 hover:bg-gray-800/80 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 text-left"
            data-skill={skillData.name}
            title={`${skillData.frequency} experiences`}
          >
            <div class="flex flex-col">
              <span class="font-medium">{skillData.name}</span>
              <div class="flex items-center justify-between mt-1">
                <div class="frequency-dots text-xs text-cyan-400">
                  {'•'.repeat(Math.min(skillData.frequency, 5))}
                </div>
                <span class="text-xs text-gray-500">({skillData.frequency})</span>
              </div>
            </div>
          </button>
        );
      })}
    </div>
  </div>

  <!-- Results Counter -->
  <div class="results-counter mb-4 text-sm text-gray-400" id="results-counter" aria-live="polite">
    Showing all {experiences.length} experiences
  </div>

  <!-- Experiences Container -->
  <div class="experiences-container" id="experiences-container">
    <!-- Timeline View (Default) -->
    <div class="timeline-view" id="timeline-view">
      <div class="space-y-8" id="timeline-list">
        {experiences.map((item, index) => (
          <div class="timeline-item relative"
               data-id={item.id}
               data-impact={item.impact}
               data-stack={item.stack.join(",")}
               data-hskills={item.highlights.flatMap((h) => h.skillsFilter).join(",")}>
            
            {/* Timeline connector */}
            {index < experiences.length - 1 && (
              <div class="absolute left-6 top-8 w-px h-full bg-gray-600/30 timeline-connector"></div>
            )}
            
            <div class="flex gap-6">
              {/* Timeline dot */}
              <div class="flex flex-col items-center">
                <div class={`w-3 h-3 rounded-full ring-4 timeline-dot impact-${item.impact >= 9 ? 'high' : item.impact >= 7 ? 'medium' : 'standard'}`}></div>
              </div>

              {/* Content */}
              <div class="flex-1 min-w-0">
                <div class="experience-card p-6 rounded-lg bg-gray-800/30 border border-gray-600/20 hover:border-gray-600/40 hover:bg-gray-800/50 transition-all duration-200">
                  <div class="mb-4">
                    <h3 class="text-lg font-semibold text-gray-200 leading-tight">
                      {item.title}
                    </h3>
                    <div class="flex flex-col sm:flex-row sm:items-center sm:gap-2 mt-1">
                      <span class="text-cyan-400 font-medium">{item.company}</span>
                      <span class="hidden sm:block text-gray-500">•</span>
                      <span class="text-gray-400 text-sm">{item.location}</span>
                      <span class="hidden sm:block text-gray-500">•</span>
                      <span class="text-gray-400 text-sm">{item.startDate} – {item.endDate}</span>
                      <span class="hidden sm:block text-gray-500">•</span>
                      <span class={`text-sm impact-indicator impact-${item.impact >= 9 ? 'high' : item.impact >= 7 ? 'medium' : 'standard'}`}>
                        Impact: {item.impact}/10
                      </span>
                    </div>
                    
                    <!-- Stack badges -->
                    <div class="flex flex-wrap gap-1.5 mt-3">
                      {item.stack.map((tech) => (
                        <span class="stack-badge px-2 py-0.5 text-xs rounded border border-gray-600/30 bg-gray-800/40 text-gray-300">
                          {tech}
                        </span>
                      ))}
                    </div>
                  </div>

                  {/* Highlights */}
                  <div class="space-y-3">
                    {item.highlights.map((highlight) => (
                      <div class="flex items-start gap-3">
                        <div class="w-1.5 h-1.5 bg-cyan-400/60 rounded-full mt-2 flex-shrink-0"></div>
                        <div class="text-gray-300 text-sm leading-relaxed">
                          <div>{highlight.oneLiner}</div>
                          {highlight.furtherDetails && (
                            <details class="mt-1">
                              <summary class="cursor-pointer text-cyan-400/80 hover:text-cyan-400 transition-colors">More details</summary>
                              <div class="mt-1 text-gray-400">{highlight.furtherDetails}</div>
                            </details>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          </div>
        ))}
      </div>
    </div>

    <!-- Grid View (Hidden by default) -->
    <div class="grid-view hidden" id="grid-view">
      <div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6" id="grid-list">
        {/* Grid items will be populated by JavaScript */}
      </div>
    </div>
  </div>
</div>

<!-- CSS Styles -->
<style>
  /* Impact level colors */
  .impact-high {
    @apply bg-green-400 ring-green-400/20;
  }
  
  .impact-medium {
    @apply bg-orange-400 ring-orange-400/20;
  }
  
  .impact-standard {
    @apply bg-gray-400 ring-gray-400/20;
  }

  .impact-indicator.impact-high {
    @apply text-green-400;
  }
  
  .impact-indicator.impact-medium {
    @apply text-orange-400;
  }
  
  .impact-indicator.impact-standard {
    @apply text-gray-400;
  }

  /* View toggle active state */
  .view-toggle-btn.active {
    @apply bg-cyan-500/20 text-cyan-300 border-cyan-400/60;
  }

  .view-toggle-btn:not(.active) {
    @apply text-gray-400 hover:text-gray-200;
  }

  /* Skill chip active state */
  .skill-chip.active {
    @apply border-cyan-400/60 bg-cyan-500/20 text-cyan-300 ring-1 ring-cyan-400/60;
  }

  .skill-chip.active .frequency-dots {
    @apply text-cyan-300;
  }

  /* Transitions */
  .timeline-view, .grid-view {
    transition: opacity 0.3s ease-in-out;
  }

  /* Highlighted skills in experiences */
  .skill-highlighted {
    @apply bg-cyan-500/20 border-cyan-400/60 text-cyan-300;
  }

  /* Relevance score display */
  .relevance-score {
    @apply text-cyan-400 font-medium;
  }
</style>

<!-- JavaScript for interactivity -->
<script>
  // Import analytics functions (would need to be bundled properly in real implementation)
  // For now, we'll implement the core functionality directly

  interface DashboardState {
    viewMode: 'timeline' | 'grid';
    selectedSkills: Set<string>;
    searchQuery: string;
    allExperiences: any[];
    filteredExperiences: any[];
  }

  class CVDashboard {
    private state: DashboardState = {
      viewMode: 'timeline',
      selectedSkills: new Set(),
      searchQuery: '',
      allExperiences: [],
      filteredExperiences: []
    };

    constructor() {
      this.initializeData();
      this.bindEvents();
      this.updateView();
    }

    private initializeData() {
      // Get experiences from DOM data
      const timelineItems = document.querySelectorAll('.timeline-item');
      this.state.allExperiences = Array.from(timelineItems).map(item => ({
        element: item,
        id: item.getAttribute('data-id'),
        impact: parseInt(item.getAttribute('data-impact') || '5'),
        stack: (item.getAttribute('data-stack') || '').split(',').filter(Boolean),
        hskills: (item.getAttribute('data-hskills') || '').split(',').filter(Boolean)
      }));
      this.state.filteredExperiences = [...this.state.allExperiences];
    }

    private bindEvents() {
      // Skill chip clicks
      document.querySelectorAll('.skill-chip').forEach(chip => {
        chip.addEventListener('click', (e) => this.handleSkillClick(e));
      });

      // View toggle
      document.querySelectorAll('.view-toggle-btn').forEach(btn => {
        btn.addEventListener('click', (e) => this.handleViewToggle(e));
      });

      // Search input
      const searchInput = document.getElementById('experience-search') as HTMLInputElement;
      if (searchInput) {
        searchInput.addEventListener('input', (e) => this.handleSearch(e));
      }

      // Reset button
      const resetBtn = document.getElementById('reset-filters');
      if (resetBtn) {
        resetBtn.addEventListener('click', () => this.resetFilters());
      }

      // Show more skills
      const showMoreBtn = document.getElementById('show-more-skills');
      if (showMoreBtn) {
        showMoreBtn.addEventListener('click', () => this.showMoreSkills());
      }

      // Keyboard navigation for skill chips
      document.addEventListener('keydown', (e) => this.handleKeyNavigation(e));
    }

    private handleSkillClick(e: Event) {
      const chip = e.currentTarget as HTMLElement;
      const skill = chip.getAttribute('data-skill');
      if (!skill) return;

      if (chip.classList.contains('active')) {
        chip.classList.remove('active');
        this.state.selectedSkills.delete(skill);
      } else {
        chip.classList.add('active');
        this.state.selectedSkills.add(skill);
      }

      this.updateView();
    }

    private handleViewToggle(e: Event) {
      const btn = e.currentTarget as HTMLElement;
      const newView = btn.getAttribute('data-view') as 'timeline' | 'grid';
      
      // Update button states
      document.querySelectorAll('.view-toggle-btn').forEach(b => {
        b.classList.remove('active');
        b.setAttribute('aria-selected', 'false');
      });
      btn.classList.add('active');
      btn.setAttribute('aria-selected', 'true');

      this.state.viewMode = newView;
      this.updateView();
    }

    private handleSearch(e: Event) {
      const input = e.target as HTMLInputElement;
      this.state.searchQuery = input.value;
      
      // Debounce search
      clearTimeout((this as any).searchTimeout);
      (this as any).searchTimeout = setTimeout(() => {
        this.updateView();
      }, 300);
    }

    private resetFilters() {
      // Clear selected skills
      this.state.selectedSkills.clear();
      document.querySelectorAll('.skill-chip.active').forEach(chip => {
        chip.classList.remove('active');
      });

      // Clear search
      this.state.searchQuery = '';
      const searchInput = document.getElementById('experience-search') as HTMLInputElement;
      if (searchInput) {
        searchInput.value = '';
      }

      this.updateView();
    }

    private showMoreSkills() {
      const additionalSkills = document.querySelector('.additional-skills');
      const showMoreBtn = document.getElementById('show-more-skills');
      
      if (additionalSkills && showMoreBtn) {
        additionalSkills.classList.remove('hidden');
        showMoreBtn.style.display = 'none';
        
        // Bind events for new chips
        additionalSkills.querySelectorAll('.skill-chip').forEach(chip => {
          chip.addEventListener('click', (e) => this.handleSkillClick(e));
        });
      }
    }

    private handleKeyNavigation(e: KeyboardEvent) {
      if (e.target instanceof HTMLElement && e.target.classList.contains('skill-chip')) {
        switch(e.key) {
          case 'ArrowRight':
            e.preventDefault();
            this.focusNextChip(e.target, 1);
            break;
          case 'ArrowLeft':
            e.preventDefault();
            this.focusNextChip(e.target, -1);
            break;
          case 'Enter':
          case ' ':
            e.preventDefault();
            e.target.click();
            break;
        }
      }
    }

    private focusNextChip(currentChip: HTMLElement, direction: number) {
      const allChips = Array.from(document.querySelectorAll('.skill-chip'));
      const currentIndex = allChips.indexOf(currentChip);
      const nextIndex = (currentIndex + direction + allChips.length) % allChips.length;
      (allChips[nextIndex] as HTMLElement).focus();
    }

    private updateView() {
      this.filterExperiences();
      this.updateResultsCounter();
      this.renderView();
      this.highlightMatchingSkills();
    }

    private filterExperiences() {
      let filtered = [...this.state.allExperiences];

      // Apply skill filters
      if (this.state.selectedSkills.size > 0) {
        const selectedArray = Array.from(this.state.selectedSkills);
        filtered = filtered.filter(exp => {
          const expSkills = [...exp.stack, ...exp.hskills];
          return selectedArray.every(skill => expSkills.includes(skill));
        });

        // Sort by relevance when filtered
        filtered = this.sortByRelevance(filtered, selectedArray);
      }

      // Apply search filter
      if (this.state.searchQuery.trim()) {
        const query = this.state.searchQuery.toLowerCase();
        filtered = filtered.filter(exp => {
          const element = exp.element;
          const searchableText = element.textContent?.toLowerCase() || '';
          return searchableText.includes(query);
        });
      }

      this.state.filteredExperiences = filtered;
    }

    private sortByRelevance(experiences: any[], selectedSkills: string[]) {
      return experiences.sort((a, b) => {
        const scoreA = this.calculateRelevanceScore(a, selectedSkills);
        const scoreB = this.calculateRelevanceScore(b, selectedSkills);
        return scoreB - scoreA;
      });
    }

    private calculateRelevanceScore(exp: any, selectedSkills: string[]): number {
      const expSkills = [...exp.stack, ...exp.hskills];
      const matches = selectedSkills.filter(skill => expSkills.includes(skill));
      
      // Simple relevance calculation
      const matchScore = matches.length * 2;
      const impactScore = exp.impact * 1.5;
      const recencyBonus = (10 - Array.from(document.querySelectorAll('.timeline-item')).indexOf(exp.element)) * 0.5;
      
      return matchScore + impactScore + recencyBonus;
    }

    private updateResultsCounter() {
      const counter = document.getElementById('results-counter');
      if (counter) {
        const total = this.state.allExperiences.length;
        const filtered = this.state.filteredExperiences.length;
        
        if (this.state.selectedSkills.size === 0 && !this.state.searchQuery.trim()) {
          counter.textContent = `Showing all ${total} experiences`;
        } else {
          counter.textContent = `Showing ${filtered} of ${total} experiences`;
        }
      }
    }

    private renderView() {
      const timelineView = document.getElementById('timeline-view');
      const gridView = document.getElementById('grid-view');
      
      if (!timelineView || !gridView) return;

      // Hide all experiences first
      this.state.allExperiences.forEach(exp => {
        exp.element.style.display = 'none';
      });

      if (this.state.viewMode === 'timeline') {
        timelineView.classList.remove('hidden');
        gridView.classList.add('hidden');
        
        // Show filtered experiences in timeline
        this.state.filteredExperiences.forEach(exp => {
          exp.element.style.display = 'block';
        });
      } else {
        timelineView.classList.add('hidden');
        gridView.classList.remove('hidden');
        
        // Render grid view
        this.renderGridView();
      }
    }

    private renderGridView() {
      const gridList = document.getElementById('grid-list');
      if (!gridList) return;

      gridList.innerHTML = '';

      this.state.filteredExperiences.forEach(exp => {
        const gridItem = this.createGridItem(exp);
        gridList.appendChild(gridItem);
      });
    }

    private createGridItem(exp: any): HTMLElement {
      const originalElement = exp.element;
      const title = originalElement.querySelector('h3')?.textContent || '';
      const company = originalElement.querySelector('.text-cyan-400')?.textContent || '';
      const timeRange = originalElement.querySelector('.text-gray-400')?.textContent || '';
      const stackBadges = Array.from(originalElement.querySelectorAll('.stack-badge')).map((badge: Element) => badge.textContent).join(', ');
      
      const relevanceScore = this.state.selectedSkills.size > 0 ? 
        this.calculateRelevanceScore(exp, Array.from(this.state.selectedSkills)) : 0;

      const gridCard = document.createElement('div');
      gridCard.className = 'grid-item bg-gray-800/30 border border-gray-600/20 rounded-lg p-6 hover:border-gray-600/40 hover:bg-gray-800/50 transition-all duration-200';
      
      gridCard.innerHTML = `
        <div class="mb-4">
          <h3 class="text-lg font-semibold text-gray-200 mb-2">${title}</h3>
          <div class="text-cyan-400 font-medium mb-1">${company}</div>
          <div class="text-sm text-gray-400">${timeRange}</div>
          ${this.state.selectedSkills.size > 0 ? `
            <div class="mt-2 text-sm relevance-score">Relevance: ${Math.round((relevanceScore / 20) * 100)}%</div>
          ` : ''}
        </div>
        <div class="flex items-center justify-between mb-3">
          <span class="impact-indicator impact-${exp.impact >= 9 ? 'high' : exp.impact >= 7 ? 'medium' : 'standard'} text-sm font-medium">
            Impact: ${exp.impact}/10
          </span>
        </div>
        <div class="text-sm text-gray-400 line-clamp-2">
          ${stackBadges}
        </div>
      `;

      return gridCard;
    }

    private highlightMatchingSkills() {
      if (this.state.selectedSkills.size === 0) {
        // Remove all highlighting
        document.querySelectorAll('.stack-badge').forEach(badge => {
          badge.classList.remove('skill-highlighted');
        });
        return;
      }

      // Highlight matching skills in visible experiences
      this.state.filteredExperiences.forEach(exp => {
        const badges = exp.element.querySelectorAll('.stack-badge');
        badges.forEach((badge: HTMLElement) => {
          const skillName = badge.textContent?.trim();
          if (skillName && this.state.selectedSkills.has(skillName)) {
            badge.classList.add('skill-highlighted');
          } else {
            badge.classList.remove('skill-highlighted');
          }
        });
      });
    }
  }

  // Initialize dashboard when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CVDashboard();
  });
</script>