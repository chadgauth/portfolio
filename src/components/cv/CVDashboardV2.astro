---
import { cvDataV2 } from '../../data/cv.ts';
import {
  getSmartFilterSkills,
  getTopSkills,
  getExperienceMetrics,
  type SkillAnalytics
} from '../../data/cv-analytics.ts';

// Get data for the dashboard
const smartSkills = getSmartFilterSkills();
const topSkills = getTopSkills(12);
const metrics = getExperienceMetrics();
const experiences = cvDataV2;
---

<div class="cv-dashboard-v2 flex min-h-screen bg-gray-900" id="cv-dashboard-v2">
  <!-- Left Sidebar -->
  <div class="sidebar w-80 bg-gray-800/50 border-r border-gray-600/30 flex flex-col">
    <!-- Career Navigation -->
    <div class="career-nav flex-1 p-6">
      <h3 class="text-lg font-semibold text-gray-200 mb-4 flex items-center">
        <span class="w-1 h-5 bg-cyan-400 mr-3 rounded-full"></span>
        Career Timeline
      </h3>
      
      <div class="space-y-2" id="career-nav-list">
        {experiences.map((exp, index) => (
          <button 
            class={`career-nav-item w-full text-left p-3 rounded-lg border border-gray-600/30 bg-gray-800/30 hover:bg-gray-800/50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 ${index === 0 ? 'career-nav-selected' : ''}`}
            data-experience={exp.id}
            data-index={index}
          >
            <div class="flex items-start justify-between mb-2">
              <h4 class="font-medium text-gray-200 text-sm leading-tight">{exp.company}</h4>
              <span class={`text-xs px-2 py-0.5 rounded impact-badge impact-${exp.impact >= 9 ? 'high' : exp.impact >= 7 ? 'medium' : 'standard'}`}>
                {exp.impact}/10
              </span>
            </div>
            <div class="text-xs text-gray-400 mb-1">{exp.title}</div>
            <div class="text-xs text-gray-500">{exp.startDate} – {exp.endDate}</div>
          </button>
        ))}
      </div>
    </div>

    <!-- Skills Filter -->
    <div class="skills-filter p-6 border-t border-gray-600/30">
      <h3 class="text-lg font-semibold text-gray-200 mb-4 flex items-center">
        <span class="w-1 h-5 bg-cyan-400 mr-3 rounded-full"></span>
        Filter by Skills
      </h3>
      
      <div class="space-y-2 max-h-60 overflow-y-auto" id="skills-list">
        {topSkills.map((skill) => (
          <button 
            class="skill-filter-item w-full text-left px-3 py-2 rounded-md border border-gray-600/30 bg-gray-800/40 hover:bg-gray-800/60 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60"
            data-skill={skill.name}
          >
            <div class="flex items-center justify-between">
              <span class="text-sm text-gray-300 font-medium">{skill.name}</span>
              <div class="flex items-center gap-2">
                <div class="frequency-dots text-xs text-cyan-400">
                  {'•'.repeat(Math.min(skill.frequency, 5))}
                </div>
                <span class="text-xs text-gray-500">({skill.frequency})</span>
              </div>
            </div>
          </button>
        ))}
      </div>

      <button class="clear-filters mt-4 w-full px-3 py-2 text-sm text-gray-400 hover:text-gray-200 border border-gray-600/30 rounded-md hover:bg-gray-800/40 transition-all duration-200">
        Clear All Filters
      </button>
    </div>

    <!-- Metrics -->
    <div class="metrics p-6 border-t border-gray-600/30">
      <h3 class="text-sm font-semibold text-gray-400 mb-3">Overview</h3>
      <div class="space-y-2 text-sm">
        <div class="flex justify-between">
          <span class="text-gray-400">Experience</span>
          <span class="text-gray-200">{metrics.totalYears}+ years</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-400">Companies</span>
          <span class="text-gray-200">{metrics.companies}</span>
        </div>
        <div class="flex justify-between">
          <span class="text-gray-400">Technologies</span>
          <span class="text-gray-200">{metrics.technologies}+</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Content Area -->
  <div class="main-content flex-1 flex flex-col">
    <!-- Search Bar -->
    <div class="search-header p-6 border-b border-gray-600/30">
      <div class="flex items-center gap-4">
        <div class="relative flex-1 max-w-md">
          <input
            type="text"
            placeholder="Search experiences, skills, achievements..."
            class="search-input w-full px-4 py-3 text-sm bg-gray-800/50 border border-gray-600/30 rounded-lg text-gray-200 placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-cyan-400/60 focus:border-cyan-400/60"
            id="instant-search"
          />
          <svg class="absolute right-3 top-3.5 h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
        </div>
        
        <button class="clear-search px-4 py-3 text-sm text-gray-400 hover:text-gray-200 border border-gray-600/30 rounded-lg hover:bg-gray-800/40 transition-all duration-200">
          Clear
        </button>
      </div>
      
      <!-- Active Filters Display -->
      <div class="active-filters mt-4 hidden" id="active-filters">
        <div class="flex items-center gap-2 flex-wrap">
          <span class="text-sm text-gray-400">Active filters:</span>
          <div class="filter-chips flex gap-2 flex-wrap" id="filter-chips">
            <!-- Dynamic filter chips will be added here -->
          </div>
        </div>
      </div>
    </div>

    <!-- Content Area -->
    <div class="content-area flex-1 p-6">
      <!-- Selected Experience -->
      <div class="selected-experience mb-8" id="selected-experience">
        <div class="experience-header mb-6">
          <h2 class="text-2xl font-bold text-gray-200 mb-2" id="exp-title">
            {experiences[0].title}
          </h2>
          <div class="flex items-center gap-4 text-sm text-gray-400 mb-4">
            <span class="text-cyan-400 font-medium" id="exp-company">{experiences[0].company}</span>
            <span>•</span>
            <span id="exp-location">{experiences[0].location}</span>
            <span>•</span>
            <span id="exp-dates">{experiences[0].startDate} – {experiences[0].endDate}</span>
            <span>•</span>
            <span class={`impact-indicator impact-${experiences[0].impact >= 9 ? 'high' : experiences[0].impact >= 7 ? 'medium' : 'standard'}`} id="exp-impact">
              Impact: {experiences[0].impact}/10
            </span>
          </div>
          
          <!-- Tech Stack -->
          <div class="tech-stack mb-6">
            <h3 class="text-sm font-semibold text-gray-400 mb-3">Technology Stack</h3>
            <div class="flex flex-wrap gap-2" id="exp-stack">
              {experiences[0].stack.map((tech) => (
                <span class="tech-badge px-3 py-1 text-sm rounded-md border border-gray-600/30 bg-gray-800/40 text-gray-300 transition-all duration-200">
                  {tech}
                </span>
              ))}
            </div>
          </div>
        </div>

        <!-- Key Achievements -->
        <div class="achievements">
          <h3 class="text-lg font-semibold text-gray-200 mb-4">Key Achievements</h3>
          <div class="space-y-4" id="exp-highlights">
            {experiences[0].highlights.map((highlight) => (
              <div class="achievement-item flex items-start gap-3 p-4 rounded-lg bg-gray-800/30 border border-gray-600/20">
                <div class="w-2 h-2 bg-cyan-400/60 rounded-full mt-2 flex-shrink-0"></div>
                <div class="flex-1">
                  <p class="text-gray-300 leading-relaxed">{highlight.oneLiner}</p>
                  {highlight.furtherDetails && (
                    <details class="mt-2">
                      <summary class="cursor-pointer text-cyan-400/80 hover:text-cyan-400 text-sm transition-colors">
                        More details
                      </summary>
                      <p class="mt-2 text-sm text-gray-400 leading-relaxed">{highlight.furtherDetails}</p>
                    </details>
                  )}
                  {highlight.skillsFilter.length > 0 && (
                    <div class="mt-3 flex flex-wrap gap-1">
                      {highlight.skillsFilter.map((skill) => (
                        <span class="highlight-skill px-2 py-0.5 text-xs rounded bg-gray-700/50 text-gray-400 border border-gray-600/30">
                          {skill}
                        </span>
                      ))}
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>

      <!-- Related Experiences -->
      <div class="related-experiences" id="related-experiences">
        <h3 class="text-lg font-semibold text-gray-200 mb-4">Related Experiences</h3>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" id="related-list">
          {experiences.slice(1, 4).map((exp) => (
            <button 
              class="related-item text-left p-4 rounded-lg bg-gray-800/30 border border-gray-600/20 hover:border-gray-600/40 hover:bg-gray-800/50 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-cyan-400/60"
              data-experience={exp.id}
            >
              <div class="flex items-start justify-between mb-3">
                <h4 class="font-semibold text-gray-200 text-sm leading-tight">{exp.company}</h4>
                <span class="match-percentage text-xs text-cyan-400 opacity-0">100%</span>
              </div>
              <div class="text-xs text-gray-400 mb-2">{exp.title}</div>
              <div class="text-xs text-gray-500 mb-3">{exp.startDate} – {exp.endDate}</div>
              <div class="flex flex-wrap gap-1">
                {exp.stack.slice(0, 4).map((tech) => (
                  <span class="text-xs px-2 py-0.5 rounded bg-gray-700/50 text-gray-400 border border-gray-600/30">
                    {tech}
                  </span>
                ))}
                {exp.stack.length > 4 && (
                  <span class="text-xs px-2 py-0.5 rounded bg-gray-700/50 text-gray-400">
                    +{exp.stack.length - 4}
                  </span>
                )}
              </div>
            </button>
          ))}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Styles -->
<style>
  /* Impact indicators */
  .impact-high { @apply text-green-400; }
  .impact-medium { @apply text-orange-400; }
  .impact-standard { @apply text-gray-400; }
  
  .impact-badge.impact-high { @apply bg-green-400/20 text-green-400 border-green-400/30; }
  .impact-badge.impact-medium { @apply bg-orange-400/20 text-orange-400 border-orange-400/30; }
  .impact-badge.impact-standard { @apply bg-gray-400/20 text-gray-400 border-gray-400/30; }

  /* Selection states */
  .career-nav-selected {
    @apply bg-cyan-500/20 border-cyan-400/60 text-cyan-300;
  }
  
  .skill-filter-active {
    @apply bg-cyan-500/20 border-cyan-400/60 text-cyan-300;
  }

  /* Tech highlighting */
  .tech-highlighted {
    @apply bg-cyan-500/20 border-cyan-400/60 text-cyan-300;
  }
  
  .tech-partial-highlight {
    @apply bg-orange-500/10 border-orange-400/40 text-orange-300;
  }

  /* Experience states */
  .experience-full-match {
    @apply opacity-100 border-cyan-400/40;
  }
  
  .experience-partial-match {
    @apply opacity-70 border-orange-400/30;
  }
  
  .experience-no-match {
    @apply opacity-40 border-gray-600/20;
  }

  /* Mobile responsiveness */
  @media (max-width: 1023px) {
    .cv-dashboard-v2 {
      @apply flex-col;
    }
    
    .sidebar {
      @apply w-full border-r-0 border-b border-gray-600/30;
    }
    
    .career-nav {
      @apply hidden;
    }
    
    .skills-filter {
      @apply p-4;
    }
    
    .skills-filter .max-h-60 {
      @apply max-h-40;
    }
  }
</style>

<!-- JavaScript for interactivity -->
<script>
  interface DashboardState {
    selectedExperience: string;
    selectedSkills: Set<string>;
    searchQuery: string;
    allExperiences: any[];
    filteredExperiences: any[];
  }

  class CVDashboardV2 {
    private state: DashboardState = {
      selectedExperience: '',
      selectedSkills: new Set(),
      searchQuery: '',
      allExperiences: [],
      filteredExperiences: []
    };

    constructor() {
      this.initializeData();
      this.bindEvents();
      this.updateDisplay();
    }

    private initializeData() {
      // Get experiences data from the DOM
      const navItems = document.querySelectorAll('.career-nav-item');
      this.state.allExperiences = Array.from(navItems).map(item => {
        const expId = item.getAttribute('data-experience');
        return {
          id: expId,
          element: item,
          index: parseInt(item.getAttribute('data-index') || '0')
        };
      });
      
      // Set initial selected experience
      if (this.state.allExperiences.length > 0) {
        this.state.selectedExperience = this.state.allExperiences[0].id;
      }
      
      this.state.filteredExperiences = [...this.state.allExperiences];
    }

    private bindEvents() {
      // Career navigation clicks
      document.querySelectorAll('.career-nav-item').forEach(item => {
        item.addEventListener('click', (e) => this.handleExperienceSelect(e));
      });

      // Related experience clicks
      document.addEventListener('click', (e) => {
        if ((e.target as HTMLElement).closest('.related-item')) {
          this.handleExperienceSelect(e);
        }
      });

      // Skill filter clicks
      document.querySelectorAll('.skill-filter-item').forEach(item => {
        item.addEventListener('click', (e) => this.handleSkillToggle(e));
      });

      // Instant search
      const searchInput = document.getElementById('instant-search') as HTMLInputElement;
      if (searchInput) {
        searchInput.addEventListener('input', (e) => this.handleInstantSearch(e));
      }

      // Clear buttons
      document.querySelector('.clear-filters')?.addEventListener('click', () => this.clearFilters());
      document.querySelector('.clear-search')?.addEventListener('click', () => this.clearSearch());
    }

    private handleExperienceSelect(e: Event) {
      const item = (e.target as HTMLElement).closest('[data-experience]') as HTMLElement;
      if (!item) return;

      const expId = item.getAttribute('data-experience');
      if (!expId) return;

      // Update selection state
      document.querySelectorAll('.career-nav-item').forEach(nav => {
        nav.classList.remove('career-nav-selected');
      });
      
      if (item.classList.contains('career-nav-item')) {
        item.classList.add('career-nav-selected');
      } else {
        // Find and select the corresponding nav item
        const navItem = document.querySelector(`[data-experience="${expId}"]`);
        navItem?.classList.add('career-nav-selected');
      }

      this.state.selectedExperience = expId;
      this.updateSelectedExperience();
      this.updateRelatedExperiences();
    }

    private handleSkillToggle(e: Event) {
      const item = e.currentTarget as HTMLElement;
      const skill = item.getAttribute('data-skill');
      if (!skill) return;

      if (item.classList.contains('skill-filter-active')) {
        item.classList.remove('skill-filter-active');
        this.state.selectedSkills.delete(skill);
      } else {
        item.classList.add('skill-filter-active');
        this.state.selectedSkills.add(skill);
      }

      this.updateTechHighlighting();
      this.updateActiveFilters();
      this.updateRelatedExperiences();
    }

    private handleInstantSearch(e: Event) {
      const input = e.target as HTMLInputElement;
      this.state.searchQuery = input.value.toLowerCase();
      
      // No debounce - instant filtering
      this.filterExperiences();
      this.updateCareerNavigation();
    }

    private clearFilters() {
      this.state.selectedSkills.clear();
      document.querySelectorAll('.skill-filter-active').forEach(item => {
        item.classList.remove('skill-filter-active');
      });
      
      this.updateTechHighlighting();
      this.updateActiveFilters();
      this.updateRelatedExperiences();
    }

    private clearSearch() {
      this.state.searchQuery = '';
      const searchInput = document.getElementById('instant-search') as HTMLInputElement;
      if (searchInput) {
        searchInput.value = '';
      }
      
      this.filterExperiences();
      this.updateCareerNavigation();
    }

    private filterExperiences() {
      // This would filter the career navigation based on search
      // For now, we'll just update the display
      this.updateCareerNavigation();
    }

    private updateSelectedExperience() {
      // This would update the main content area with the selected experience
      // For the MVP, the content is already rendered
      console.log('Selected experience:', this.state.selectedExperience);
    }

    private updateTechHighlighting() {
      // Highlight matching technologies across all visible experiences
      document.querySelectorAll('.tech-badge, .highlight-skill').forEach(badge => {
        const tech = badge.textContent?.trim();
        badge.classList.remove('tech-highlighted', 'tech-partial-highlight');
        
        if (tech && this.state.selectedSkills.has(tech)) {
          badge.classList.add('tech-highlighted');
        }
      });
    }

    private updateActiveFilters() {
      const activeFiltersContainer = document.getElementById('active-filters');
      const filterChipsContainer = document.getElementById('filter-chips');
      
      if (!activeFiltersContainer || !filterChipsContainer) return;

      if (this.state.selectedSkills.size === 0) {
        activeFiltersContainer.classList.add('hidden');
        return;
      }

      activeFiltersContainer.classList.remove('hidden');
      filterChipsContainer.innerHTML = '';

      Array.from(this.state.selectedSkills).forEach(skill => {
        const chip = document.createElement('span');
        chip.className = 'filter-chip px-2 py-1 text-xs bg-cyan-500/20 text-cyan-300 border border-cyan-400/60 rounded-md flex items-center gap-1';
        chip.innerHTML = `
          ${skill}
          <button class="remove-filter ml-1 text-cyan-400 hover:text-cyan-300" data-skill="${skill}">×</button>
        `;
        
        chip.querySelector('.remove-filter')?.addEventListener('click', () => {
          this.state.selectedSkills.delete(skill);
          const skillBtn = document.querySelector(`[data-skill="${skill}"]`);
          skillBtn?.classList.remove('skill-filter-active');
          this.updateTechHighlighting();
          this.updateActiveFilters();
          this.updateRelatedExperiences();
        });
        
        filterChipsContainer.appendChild(chip);
      });
    }

    private updateRelatedExperiences() {
      // Update match percentages and highlighting for related experiences
      document.querySelectorAll('.related-item').forEach(item => {
        const matchPercentage = item.querySelector('.match-percentage');
        if (matchPercentage && this.state.selectedSkills.size > 0) {
          // Simple match calculation for MVP
          const techBadges = item.querySelectorAll('.text-xs');
          let matches = 0;
          
          techBadges.forEach(badge => {
            const tech = badge.textContent?.trim();
            if (tech && this.state.selectedSkills.has(tech)) {
              matches++;
              badge.classList.add('tech-highlighted');
            } else {
              badge.classList.remove('tech-highlighted');
            }
          });
          
          const percentage = Math.round((matches / Math.max(this.state.selectedSkills.size, 1)) * 100);
          matchPercentage.textContent = `${percentage}%`;
          matchPercentage.classList.remove('opacity-0');
          
          // Apply match styling
          item.classList.remove('experience-full-match', 'experience-partial-match', 'experience-no-match');
          if (percentage >= 80) {
            item.classList.add('experience-full-match');
          } else if (percentage >= 40) {
            item.classList.add('experience-partial-match');
          } else {
            item.classList.add('experience-no-match');
          }
        } else {
          if (matchPercentage) {
            matchPercentage.classList.add('opacity-0');
          }
          item.classList.remove('experience-full-match', 'experience-partial-match', 'experience-no-match');
          
          // Remove all highlighting when no filters
          item.querySelectorAll('.tech-highlighted').forEach(el => {
            el.classList.remove('tech-highlighted');
          });
        }
      });
    }

    private updateCareerNavigation() {
      // Filter career navigation based on search
      const navItems = document.querySelectorAll('.career-nav-item');
      
      navItems.forEach(item => {
        if (!this.state.searchQuery) {
          item.classList.remove('hidden');
          return;
        }
        
        const content = item.textContent?.toLowerCase() || '';
        if (content.includes(this.state.searchQuery)) {
          item.classList.remove('hidden');
        } else {
          item.classList.add('hidden');
        }
      });
    }

    private updateDisplay() {
      this.updateTechHighlighting();
      this.updateActiveFilters();
      this.updateRelatedExperiences();
    }
  }

  // Initialize dashboard when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new CVDashboardV2();
  });
</script>