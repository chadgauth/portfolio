---
import BaseLayout from "../layouts/BaseLayout.astro";
import { realCV2Data } from "../data/cv2.real";

const cv2Data = realCV2Data;

// Build helpers on the server (no DOM)
const skillLabelBySlug = new Map(cv2Data.skills.map(s => [s.slug, s.label]));

// Build skill frequency count from actual usage across experiences
const skillFrequency = new Map<string, number>();
cv2Data.experiences.forEach(exp => {
  const expSkills = new Set([
    ...(exp.primarySkills ?? []),
    ...(exp.supportingSkills ?? []),
    ...exp.achievements.flatMap(a => a.skills ?? [])
  ]);
  
  expSkills.forEach(skill => {
    skillFrequency.set(skill, (skillFrequency.get(skill) ?? 0) + 1);
  });
});

// Create filter list: only skills that appear in data, sorted by frequency (desc), limited to top 25
const skillsForFilter = Array.from(skillFrequency.entries())
  .filter(([slug]) => skillLabelBySlug.has(slug)) // Only include skills we have labels for
  .sort((a, b) => b[1] - a[1]) // Sort by frequency descending
  .slice(0, 25) // Limit to top 25 most frequent skills
  .map(([slug, count]) => ({
    slug,
    label: skillLabelBySlug.get(slug) ?? slug,
    count
  }));

// Sort experiences by start date (newest first)
const sortedExperiences = [...cv2Data.experiences].sort((a, b) => {
  const dateA = new Date(a.period.start);
  const dateB = new Date(b.period.start);
  return dateB.getTime() - dateA.getTime();
});
---

<BaseLayout title="Professional Experience - Chad Gauthier" sideBarActiveItemID="cv">
  <div class="min-h-screen">
    <!-- Subtle background effects -->
    <div class="fixed inset-0 pointer-events-none overflow-hidden -z-10">
      <div class="absolute top-1/4 -left-32 w-64 h-64 bg-cyan-500/3 rounded-full blur-3xl"></div>
      <div class="absolute bottom-1/4 -right-32 w-48 h-48 bg-blue-500/3 rounded-full blur-3xl"></div>
    </div>

    <div class="container mx-auto px-4 py-8">
      <!-- Header Section -->
      <header class="mb-12">
        <div class="max-w-4xl">
          <h1 class="text-4xl md:text-5xl font-bold bg-gradient-to-r from-gray-100 to-cyan-400 bg-clip-text text-transparent leading-tight mb-4">
            Professional Experience
          </h1>
          <div class="inline-flex items-center px-4 py-2 mb-6 rounded-lg bg-gray-800/40 border border-gray-600/30 backdrop-blur-sm">
            <div class="w-2 h-2 bg-cyan-400 rounded-full mr-3"></div>
            <span class="text-cyan-400 font-mono font-medium text-sm tracking-wide">
              10+ Years • <span id="experience-count">{sortedExperiences.length}</span> Roles • Full-Stack Engineering
            </span>
          </div>
          <p class="text-lg text-gray-300 leading-relaxed max-w-3xl">
            A chronological view of my career journey, showcasing key achievements and technologies across enterprise, finance, and startup environments.
          </p>
        </div>
      </header>

      <!-- Skills Filter Section -->
      <section class="mb-8">
        <div class="bg-gray-800/30 border border-gray-600/20 rounded-lg p-6 backdrop-blur-sm">
          <div class="flex items-center justify-between mb-4">
            <h3 class="text-lg font-semibold text-gray-200 flex items-center">
              <div class="w-1 h-4 bg-cyan-400 mr-3 rounded-full"></div>
              Filter by Technology
            </h3>
            <button
              id="clear-filters"
              class="text-sm text-gray-400 hover:text-cyan-400 transition-colors font-mono"
            >
              Clear All
            </button>
          </div>
          
          <div class="flex flex-wrap gap-2" id="skills-container">
            {skillsForFilter.map((skill) => (
              <button
                class="skill-filter inline-flex items-center gap-2 px-3 py-1.5 bg-gray-800/60 hover:bg-gray-700/60 text-gray-300 rounded-md text-sm font-medium transition-all duration-200 border border-gray-600/30 hover:border-gray-500/50"
                data-skill={skill.slug}
              >
                <span>{skill.label}</span>
                <span class="bg-gray-700/60 text-gray-400 text-xs px-1.5 py-0.5 rounded-full">
                  {skill.count}
                </span>
              </button>
            ))}
          </div>
          
          <!-- Show total count -->
          <div class="mt-3 text-xs text-gray-500 font-mono">
            Showing top {skillsForFilter.length} most used technologies from {cv2Data.skills.length} total
          </div>
        </div>
      </section>

      <!-- Timeline Layout -->
      <div class="max-w-4xl">
        <!-- Single Column Timeline Layout -->
        <main class="space-y-8" id="experiences-content">
          {sortedExperiences.map((exp, index) => {
            const unionSkills = Array.from(new Set([
              ...(exp.primarySkills ?? []),
              ...(exp.supportingSkills ?? []),
              ...exp.achievements.flatMap(a => a.skills ?? [])
            ]));
            
            return (
              <div
                class="experience-card relative"
                data-exp-id={exp.id}
                data-exp-skills={unionSkills.join(",")}
                id={`exp-${exp.id}`}
              >
                {/* Timeline connector */}
                {index < sortedExperiences.length - 1 && (
                  <div class="absolute left-6 top-8 w-px h-full bg-gray-600/30"></div>
                )}
                
                <div class="flex gap-6">
                  {/* Timeline dot */}
                  <div class="flex flex-col items-center">
                    <div class="w-3 h-3 bg-cyan-400 rounded-full ring-4 ring-cyan-400/20"></div>
                  </div>

                  {/* Content */}
                  <div class="flex-1 min-w-0">
                    <div class="mb-3">
                      <h3 class="text-lg font-semibold text-gray-200 leading-tight">
                        {exp.role}
                      </h3>
                      <div class="flex flex-col sm:flex-row sm:items-center sm:gap-2 mt-1">
                        <span class="text-cyan-400 font-medium">{exp.company}</span>
                        <span class="hidden sm:block text-gray-500">•</span>
                        <span class="text-gray-400 text-sm">{exp.location}</span>
                        <span class="hidden sm:block text-gray-500">•</span>
                        <span class="text-gray-400 text-sm">
                          {exp.period.start.split('-')[0]} – {exp.period.end ? exp.period.end.split('-')[0] : "Present"}
                        </span>
                      </div>
                      
                      <!-- Tech Stack badges -->
                      <div class="flex flex-wrap gap-1.5 mt-2">
                        {exp.primarySkills?.slice(0, 8).map((slug) => (
                          <span
                            class="tech-tag px-2 py-0.5 text-[10px] rounded border border-gray-600/30 bg-gray-800/40 text-gray-300 transition-all duration-200"
                            data-tech={slug}
                          >
                            {skillLabelBySlug.get(slug) ?? slug}
                          </span>
                        ))}
                      </div>
                    </div>

                    {/* Achievements - Compact Timeline Style */}
                    <div class="space-y-3">
                      {exp.achievements.map((achievement) => {
                        const achSkills = achievement.skills ?? [];
                        
                        return (
                          <div
                            class="achievement flex items-start gap-3"
                            data-ach-skills={achSkills.join(",")}
                          >
                            <div class="w-1.5 h-1.5 bg-cyan-400/60 rounded-full mt-2 flex-shrink-0"></div>
                            <div class="text-gray-300 text-sm leading-relaxed">
                              <div>{achievement.oneLiner}</div>
                              {achievement.details && (
                                <details class="mt-1">
                                  <summary class="cursor-pointer text-cyan-400/80 hover:text-cyan-400">More</summary>
                                  <div class="mt-1 text-gray-400">{achievement.details}</div>
                                </details>
                              )}
                              
                              {/* Compact outcomes */}
                              {achievement.outcomes && achievement.outcomes.length > 0 && (
                                <div class="flex flex-wrap gap-1 mt-1">
                                  {achievement.outcomes.map((outcome) => {
                                    const icon = outcome.direction === "decrease" ? "↓" : outcome.direction === "increase" ? "↑" : "•";
                                    const text = outcome.delta ? `${icon} ${outcome.delta}${outcome.unit}`
                                               : outcome.after ? `${icon} ${outcome.after}${outcome.unit}`
                                               : outcome.before ? `${icon} ${outcome.before}${outcome.unit}`
                                               : outcome.note ?? icon;
                                    
                                    return (
                                      <span class="px-1.5 py-0.5 bg-green-600/20 text-green-400 rounded text-[10px] font-medium">
                                        {text}
                                      </span>
                                    );
                                  })}
                                </div>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </main>
      </div>
    </div>
  </div>

  <style>
    .scroll-margin-top {
      scroll-margin-top: 2rem;
    }

    /* Active states for filtering */
    .skill-filter.active {
      background: linear-gradient(135deg, #0891b2, #06b6d4) !important;
      border-color: #06b6d4 !important;
      color: white !important;
      box-shadow: 0 0 20px rgba(6, 182, 212, 0.3);
    }

    .timeline-nav-item.active .timeline-nav-content {
      border-color: #06b6d4 !important;
      background: rgba(6, 182, 212, 0.1) !important;
    }

    .timeline-nav-item.active .timeline-dot {
      background: #06b6d4 !important;
      box-shadow: 0 0 10px rgba(6, 182, 212, 0.5);
    }

    /* Experience card hide/show states */
    .experience-card.hidden {
      opacity: 0;
      transform: translateY(20px);
      pointer-events: none;
      height: 0;
      overflow: hidden;
      margin: 0;
      transition: all 400ms ease;
    }

    .experience-card {
      transition: all 400ms ease;
    }

    /* Achievement highlighting */
    .achievement.highlight {
      background: rgba(6, 182, 212, 0.1) !important;
      border-color: rgba(6, 182, 212, 0.4) !important;
    }

    .achievement.dim {
      opacity: 0.4;
      transform: scale(0.98);
    }

    /* Tech tag highlighting */
    .tech-tag.highlighted,
    .tech-tag-small.highlighted {
      background: linear-gradient(135deg, #0891b2, #06b6d4) !important;
      border-color: #06b6d4 !important;
      color: white !important;
      box-shadow: 0 0 10px rgba(6, 182, 212, 0.3);
      transform: translateY(-1px);
    }
  </style>

  <script>
    (function() {
      const selectedSkills = new Set();

      function splitCSV(str) {
        return (str || '').split(',').map(s => s.trim()).filter(Boolean);
      }

      function updateExperiences() {
        const experiences = document.querySelectorAll('.experience-card');
        let visibleCount = 0;

        experiences.forEach(exp => {
          const expSkills = new Set(splitCSV(exp.getAttribute('data-exp-skills')));
          const shouldShow = selectedSkills.size === 0 || 
            Array.from(selectedSkills).every(skill => expSkills.has(skill));

          if (shouldShow) {
            exp.classList.remove('hidden');
            visibleCount++;
          } else {
            exp.classList.add('hidden');
          }

          // Highlight relevant achievements and tech tags
          const achievements = exp.querySelectorAll('.achievement');
          const techTags = exp.querySelectorAll('[data-tech]');

          if (selectedSkills.size === 0) {
            achievements.forEach(ach => {
              ach.classList.remove('highlight', 'dim');
            });
            techTags.forEach(tag => {
              tag.classList.remove('highlighted');
            });
          } else {
            achievements.forEach(ach => {
              const achSkills = new Set(splitCSV(ach.getAttribute('data-ach-skills')));
              const hasMatch = Array.from(selectedSkills).some(skill => achSkills.has(skill));
              ach.classList.toggle('highlight', hasMatch);
              ach.classList.toggle('dim', !hasMatch);
            });

            techTags.forEach(tag => {
              const tagSkill = tag.getAttribute('data-tech');
              tag.classList.toggle('highlighted', selectedSkills.has(tagSkill));
            });
          }
        });

        // Update counter
        const counter = document.getElementById('experience-count');
        if (counter) {
          counter.textContent = visibleCount.toString();
        }
      }

      // Timeline navigation
      document.querySelectorAll('.timeline-nav-item').forEach(item => {
        item.addEventListener('click', () => {
          const expId = item.getAttribute('data-exp-id');
          const target = document.getElementById(`exp-${expId}`);
          if (target) {
            target.scrollIntoView({ behavior: 'smooth', block: 'start' });
          }
        });
      });

      // Skill filter interactions
      document.querySelectorAll('.skill-filter').forEach(button => {
        button.addEventListener('click', () => {
          const skill = button.getAttribute('data-skill');
          if (!skill) return;

          if (selectedSkills.has(skill)) {
            selectedSkills.delete(skill);
            button.classList.remove('active');
          } else {
            selectedSkills.add(skill);
            button.classList.add('active');
          }

          updateExperiences();
        });
      });

      // Clear filters
      document.getElementById('clear-filters')?.addEventListener('click', () => {
        selectedSkills.clear();
        document.querySelectorAll('.skill-filter.active').forEach(btn => {
          btn.classList.remove('active');
        });
        updateExperiences();
      });

      // Initial state
      updateExperiences();
    })();
  </script>
</BaseLayout>