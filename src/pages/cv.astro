---
import BaseLayout from "../layouts/BaseLayout.astro";
import HeroBackground from "../components/HeroBackground.astro";
import CVLayout from "../components/cv/CVLayout.astro";
import { experiences, skills } from "@/data/cv2";

// Build helpers on the server (no DOM)
const skillLabelBySlug = new Map(skills.map(s => [s.slug, s.label]));

// Build skill frequency count from actual usage across experiences
const skillFrequency = new Map<string, number>();
experiences.forEach(exp => {
  const expSkills = new Set([
    ...(exp.primarySkills ?? []),
    ...(exp.supportingSkills ?? []),
    ...exp.achievements.flatMap(a => a.skills ?? [])
  ]);
  
  expSkills.forEach(skill => {
    skillFrequency.set(skill, (skillFrequency.get(skill) ?? 0) + 1);
  });
});

// Create filter list: only skills that appear in data, sorted by frequency (desc), limited to top 25
const skillsForFilter = Array.from(skillFrequency.entries())
  .filter(([slug]) => skillLabelBySlug.has(slug)) // Only include skills we have labels for
  .sort((a, b) => b[1] - a[1]) // Sort by frequency descending
  .slice(0, 25) // Limit to top 25 most frequent skills
  .map(([slug, count]) => ({
    slug,
    label: skillLabelBySlug.get(slug) ?? slug,
    count
  }));

// Sort experiences by start date (newest first)
const sortedExperiences = [...experiences].sort((a, b) => {
  const dateA = new Date(a.period.start);
  const dateB = new Date(b.period.start);
  return dateB.getTime() - dateA.getTime();
});
---

<BaseLayout title="Professional Experience - Chad Gauthier" sideBarActiveItemID="cv">
  <!-- Compact Header Section -->
  <div class="relative py-8 md:py-16 overflow-hidden">
    <HeroBackground size="compact" showShapes={true} />

    <!-- Navigation Header -->
    <nav class="relative z-20 container mx-auto px-4 py-6">
      <div class="flex items-center justify-between">
        <a href="/" class="flex items-center gap-2 text-cyan-400 hover:text-cyan-300 transition-colors duration-200 group">
          <svg class="w-5 h-5 group-hover:-translate-x-1 transition-transform duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
          </svg>
          <span class="font-semibold">Home</span>
        </a>
        
        <div class="text-gray-400 font-mono text-sm">
          {sortedExperiences.length} Roles • 11+ Years
        </div>
      </div>
    </nav>

    <!-- Header Content -->
    <div class="relative z-10 container mx-auto px-4">
      <div class="max-w-4xl mx-auto">
        <div class="grid md:grid-cols-2 gap-8 items-center">
          <div class="space-y-4 fade-in-up">
            <div class="text-lg text-cyan-400 font-mono tracking-wider">
              > Professional Journey
            </div>
            <h1 class="text-4xl lg:text-5xl font-bold bg-gradient-to-r from-cyan-400 via-blue-500 to-purple-500 bg-clip-text text-transparent leading-tight">
              Experience<span class="text-white">.</span>
            </h1>
            <p class="text-lg text-gray-400 leading-relaxed">
              Full-Stack Engineering & Innovation across enterprise, finance, and startup environments.
            </p>
          </div>

          <!-- Quick Stats -->
          <div class="grid grid-cols-3 gap-4 fade-in-up" style="animation-delay: 0.2s">
            <div class="text-center p-4 bg-gray-800/20 rounded-lg border border-gray-700/30">
              <div class="text-2xl font-bold text-cyan-400">11+</div>
              <div class="text-sm text-gray-400">Years</div>
            </div>
            <div class="text-center p-4 bg-gray-800/20 rounded-lg border border-gray-700/30">
              <div class="text-2xl font-bold text-blue-400">{sortedExperiences.length}</div>
              <div class="text-sm text-gray-400">Roles</div>
            </div>
            <div class="text-center p-4 bg-gray-800/20 rounded-lg border border-gray-700/30">
              <div class="text-2xl font-bold text-purple-400">{skillsForFilter.length}+</div>
              <div class="text-sm text-gray-400">Technologies</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Skills Filter and Experience Timeline -->
  <section class="relative py-4 lg:py-8 bg-gray-900/50">
    <div class="container mx-auto px-4">
      <div>
        <CVLayout>
          <div slot="filters">
            <div class="flex items-center justify-between mb-4 md:mb-6">
              <h3 class="text-lg md:text-xl font-bold text-gray-200 flex items-center">
                <div class="w-1 h-5 md:h-6 bg-cyan-500 mr-3 md:mr-4 rounded-full"></div>
                Filter by Technology
              </h3>
              <button
                id="clear-filters"
                class="text-sm text-gray-400 hover:text-cyan-400 transition-colors font-mono"
              >
                Clear All
              </button>
            </div>

            <div class="flex gap-2 lg:gap-3 overflow-x-auto md:flex-wrap md:overflow-visible pb-2 md:pb-0" id="skills-container">
              {skillsForFilter.map((skill) => (
                <button
                  class="skill-filter inline-flex items-center gap-2 px-3 md:px-4 py-2 bg-gray-800/60 hover:bg-gray-700/60 text-gray-300 rounded-lg font-medium transition-all duration-200 border border-gray-600/30 hover:border-gray-500/50 whitespace-nowrap"
                  data-skill={skill.slug}
                >
                  <span>{skill.label}</span>
                  <span class="bg-gray-700/60 text-gray-400 text-xs px-2 py-1 rounded-full">
                    {skill.count}
                  </span>
                </button>
              ))}
            </div>

            <!-- Show total count -->
            <div class="mt-4 text-sm text-gray-500 font-mono">
              Showing top {skillsForFilter.length} most used technologies from {skills.length} total
            </div>
          </div>

          <div slot="experiences">
            <main class="space-y-8" id="experiences-content">
          {sortedExperiences.map((exp, index) => {
            const unionSkills = Array.from(new Set([
              ...(exp.primarySkills ?? []),
              ...(exp.supportingSkills ?? []),
              ...exp.achievements.flatMap(a => a.skills ?? [])
            ]));
            
            return (
              <div
                class="experience-card relative fade-in-up"
                data-exp-id={exp.id}
                data-exp-skills={unionSkills.join(",")}
                id={`exp-${exp.id}`}
                style={`animation-delay: ${index * 0.1}s`}
              >
                {/* Timeline connector */}
                {index < sortedExperiences.length - 1 && (
                  <div class="absolute left-6 top-8 w-px h-full bg-gray-600/30"></div>
                )}
                
                <div class="flex gap-6">
                  {/* Timeline dot */}
                  <div class="flex flex-col items-center">
                    <div class="w-4 h-4 bg-cyan-500 rounded-full ring-4 ring-cyan-500/20 shadow-lg shadow-cyan-500/50"></div>
                  </div>

                  {/* Content */}
                  <div class="flex-1 min-w-0">
                    <div class="bg-gray-800/30 border border-gray-700/50 rounded-xl p-6 backdrop-blur-sm hover:border-cyan-500/30 transition-all duration-300">
                      <div class="mb-4">
                        <h3 class="text-xl font-bold text-gray-200 leading-tight mb-2">
                          {exp.role}
                        </h3>
                        <div class="flex flex-col sm:flex-row sm:items-center sm:gap-2">
                          <span class="text-cyan-400 font-semibold text-lg">{exp.company}</span>
                          <span class="hidden sm:block text-gray-500">•</span>
                          <span class="text-gray-400">{exp.location}</span>
                          <span class="hidden sm:block text-gray-500">•</span>
                          <span class="text-gray-400">
                            {exp.period.start.split('-')[0]} – {exp.period.end ? exp.period.end.split('-')[0] : "Present"}
                          </span>
                        </div>
                        
                        <!-- Tech Stack badges -->
                        <div class="flex flex-wrap gap-2 mt-3">
                          {exp.primarySkills?.slice(0, 8).map((slug) => (
                            <span
                              class="tech-tag px-3 py-1 text-xs rounded-full border border-gray-600/30 bg-gray-800/50 text-gray-300 transition-all duration-200 hover:border-cyan-500/50 hover:text-cyan-300"
                              data-tech={slug}
                            >
                              {skillLabelBySlug.get(slug) ?? slug}
                            </span>
                          ))}
                        </div>
                      </div>

                      {/* Achievements */}
                      <div class="space-y-4">
                        {exp.achievements.map((achievement) => {
                          const achSkills = achievement.skills ?? [];
                          
                          return (
                            <div
                              class="achievement flex items-start gap-4 p-4 rounded-lg bg-gray-800/20 border border-gray-700/20"
                              data-ach-skills={achSkills.join(",")}
                            >
                              <div class="w-2 h-2 bg-cyan-500/80 rounded-full mt-2 flex-shrink-0"></div>
                              <div class="text-gray-300 leading-relaxed">
                                <div class="font-medium mb-1">{achievement.oneLiner}</div>
                                {achievement.details && (
                                  <details class="mt-2">
                                    <summary class="cursor-pointer text-cyan-400/80 hover:text-cyan-400 text-sm">Show Details</summary>
                                    <div class="mt-2 text-gray-400 text-sm">{achievement.details}</div>
                                  </details>
                                )}
                                
                                {/* Outcomes */}
                                {achievement.outcomes && achievement.outcomes.length > 0 && (
                                  <div class="flex flex-wrap gap-2 mt-3">
                                    {achievement.outcomes.map((outcome) => {
                                      const icon = outcome.direction === "decrease" ? "↓" : outcome.direction === "increase" ? "↑" : "•";
                                      const text = outcome.delta ? `${icon} ${outcome.delta}${outcome.unit}`
                                                 : outcome.after ? `${icon} ${outcome.after}${outcome.unit}`
                                                 : outcome.before ? `${icon} ${outcome.before}${outcome.unit}`
                                                 : outcome.note ?? icon;
                                      
                                      return (
                                        <span class="px-2 py-1 bg-green-500/20 text-green-400 border border-green-500/30 rounded-md text-xs font-medium">
                                          {text}
                                        </span>
                                      );
                                    })}
                                  </div>
                                )}
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
            </main>

            <!-- Call to Action -->
            <div class="mt-16 text-center">
              <div class="bg-gray-800/30 border border-gray-700/50 rounded-2xl p-8 backdrop-blur-sm">
                <h3 class="text-2xl font-bold text-gray-200 mb-4">
                  Let's build something amazing together
                </h3>
                <p class="text-gray-400 mb-6 max-w-2xl mx-auto">
                  I'm passionate about tackling complex challenges and creating innovative solutions.
                  Always open to discussing new opportunities and interesting projects.
                </p>
                <div class="flex flex-col sm:flex-row gap-4 justify-center">
                  <button onclick="openContactModal()" class="cyber-button-primary">
                    <span>Get In Touch</span>
                    <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                  </button>
                  <a href="/" class="cyber-button-secondary">
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                    </svg>
                    <span>Back to Home</span>
                  </a>
                </div>
              </div>
            </div>
          </div>
        </CVLayout>
  </section>
</BaseLayout>

<style>
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Fade in animations */
  .fade-in-up {
    animation: fadeInUp 1s ease-out forwards;
  }

  /* Active states for filtering */
  .skill-filter.active {
    background: linear-gradient(135deg, #0891b2, #06b6d4) !important;
    border-color: #06b6d4 !important;
    color: white !important;
    box-shadow: 0 0 20px rgba(6, 182, 212, 0.3);
  }

  /* Experience card hide/show states */
  .experience-card.hidden {
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
    max-height: 0;
    overflow: hidden;
    margin: 0;
    transition: all 400ms ease;
  }

  .experience-card {
    transition: all 400ms ease;
  }

  /* Achievement highlighting */
  .achievement.highlight {
    background: rgba(6, 182, 212, 0.1) !important;
    border-color: rgba(6, 182, 212, 0.4) !important;
  }

  .achievement.visible {
    max-height: 1000px;
    transition: all 400ms ease;
  }

  .achievement.hidden {
    opacity: 0;
    max-height: 0;
    overflow: hidden;
    margin: 0;
    transition: all 400ms ease;
  }

  /* Tech tag highlighting */
  .tech-tag.highlighted {
    background: linear-gradient(135deg, #0891b2, #06b6d4) !important;
    border-color: #06b6d4 !important;
    color: white !important;
    box-shadow: 0 0 10px rgba(6, 182, 212, 0.3);
    transform: translateY(-1px);
  }


  /* Button styles */
  .cyber-button-primary {
    @apply inline-flex items-center px-6 py-3 bg-gradient-to-r from-cyan-500 to-blue-600
           text-white font-semibold rounded-lg transition-all duration-300
           hover:shadow-lg hover:shadow-cyan-500/25 hover:scale-105;
  }

  .cyber-button-secondary {
    @apply inline-flex items-center px-6 py-3 bg-gray-800 border border-gray-600
           text-gray-300 font-semibold rounded-lg transition-all duration-300
           hover:bg-gray-700 hover:border-gray-500 hover:text-white;
  }

   #skills-container::-webkit-scrollbar {
    height: 4px;
  }
  #skills-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 2px;
  }
  #skills-container::-webkit-scrollbar-thumb {
    background: rgba(6, 182, 212, 0.5);
    border-radius: 2px;
  }
  #skills-container::-webkit-scrollbar-thumb:hover {
    background: rgba(6, 182, 212, 0.7);
  }
</style>

<script is:inline>
  (function() {
    const selectedSkills = new Set();

    function splitCSV(str) {
      return (str || '').split(',').map(s => s.trim()).filter(Boolean);
    }

    function updateExperiences() {
      const experiences = document.querySelectorAll('.experience-card');
      let visibleCount = 0;

      experiences.forEach(exp => {
        const expSkills = new Set(splitCSV(exp.getAttribute('data-exp-skills')));
        const shouldShow = selectedSkills.size === 0 ||
          Array.from(selectedSkills).some(skill => expSkills.has(skill));

        if (shouldShow) {
          exp.classList.remove('hidden');
          visibleCount++;
        } else {
          exp.classList.add('hidden');
        }

        // Highlight relevant achievements and tech tags
        const achievements = exp.querySelectorAll('.achievement');
        const techTags = exp.querySelectorAll('[data-tech]');

        if (selectedSkills.size === 0) {
          achievements.forEach(ach => {
            ach.classList.remove('highlight', 'hidden');
            ach.classList.add('visible');
          });
          techTags.forEach(tag => {
            tag.classList.remove('highlighted');
          });
        } else {
          achievements.forEach(ach => {
            const achSkills = new Set(splitCSV(ach.getAttribute('data-ach-skills')));
            const hasMatch = Array.from(selectedSkills).some(skill => achSkills.has(skill));
            ach.classList.toggle('highlight', hasMatch);
            if (hasMatch) {
              ach.classList.add('visible');
              ach.classList.remove('hidden');
            } else {
              ach.classList.remove('visible');
              ach.classList.add('hidden');
            }
          });

          techTags.forEach(tag => {
            const tagSkill = tag.getAttribute('data-tech');
            tag.classList.toggle('highlighted', selectedSkills.has(tagSkill));
          });
        }
      });
    }

    // Skill filter interactions
    document.querySelectorAll('.skill-filter').forEach(button => {
      button.addEventListener('click', () => {
        const skill = button.getAttribute('data-skill');
        if (!skill) return;

        if (selectedSkills.has(skill)) {
          selectedSkills.delete(skill);
          button.classList.remove('active');
        } else {
          selectedSkills.add(skill);
          button.classList.add('active');
        }

        updateExperiences();
      });
    });

    // Clear filters
    document.getElementById('clear-filters')?.addEventListener('click', () => {
      selectedSkills.clear();
      document.querySelectorAll('.skill-filter.active').forEach(btn => {
        btn.classList.remove('active');
      });
      updateExperiences();
    });


    // Initial state
    updateExperiences();
  })();
</script>
</BaseLayout>